{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "authorship_tag": "ABX9TyPNcG5fp4OaHI2KYtn3LhLV",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/Jesuusgr072/JesusClase/blob/main/Colab%20con%20Grafico\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "# 1) Descargar la base de datos\n",
        "\n"
      ],
      "metadata": {
        "id": "Isdj_NS17F3n"
      }
    },
    {
      "cell_type": "code",
      "execution_count": 1,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "fsut7uRV54Id",
        "outputId": "4be61545-483e-49c3-a58c-ce08181025da"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Downloading...\n",
            "From: https://drive.google.com/uc?id=1puf9UBuzaVqMW3ZMMXhd626E5yVJd_QX\n",
            "To: /content/data_berka.db\n",
            "100% 70.2M/70.2M [00:00<00:00, 110MB/s]\n"
          ]
        }
      ],
      "source": [
        "!gdown 1puf9UBuzaVqMW3ZMMXhd626E5yVJd_QX"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "# 1.1) Cargamos la extension SQL (nos permite ejecutar comandos sql directamente en colab)"
      ],
      "metadata": {
        "id": "T784lDFD8EbC"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "%config SqlMagic.style = '_DEPRECATED_DEFAULT'\n",
        "%load_ext sql"
      ],
      "metadata": {
        "id": "rf8HGFrI8QS3"
      },
      "execution_count": 2,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "# 1.2) Conectar a la Base de Datos"
      ],
      "metadata": {
        "id": "iHzJDqAs8YCH"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "%sql sqlite:///data_berka.db"
      ],
      "metadata": {
        "id": "gqmnb6RP8jcf"
      },
      "execution_count": 3,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "# 1.3) Comprobamos el esque de la BBDD para ejecutar comandos sql, se debe aÃ±adir \"%%sql comando\" o en multiples lineas \"%%sql comando_linea1, comando_linea2\""
      ],
      "metadata": {
        "id": "4_vilkgG85s_"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "%%sql\n",
        "SELECT name, type\n",
        "FROM sqlite_master\n",
        "WHERE type = \"table\""
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 246
        },
        "id": "NEGWK09Y86wn",
        "outputId": "659f92a8-2374-4e69-eae9-24bfaeb42528"
      },
      "execution_count": 4,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            " * sqlite:///data_berka.db\n",
            "Done.\n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "[('DISTRICT', 'table'),\n",
              " ('ACCOUNT', 'table'),\n",
              " ('TRANS', 'table'),\n",
              " ('CLIENT', 'table'),\n",
              " ('DISPOSITION', 'table'),\n",
              " ('CREDIT_CARD', 'table'),\n",
              " ('LOAN', 'table'),\n",
              " ('PERMANENT_ORDER', 'table')]"
            ],
            "text/html": [
              "<table>\n",
              "    <thead>\n",
              "        <tr>\n",
              "            <th>name</th>\n",
              "            <th>type</th>\n",
              "        </tr>\n",
              "    </thead>\n",
              "    <tbody>\n",
              "        <tr>\n",
              "            <td>DISTRICT</td>\n",
              "            <td>table</td>\n",
              "        </tr>\n",
              "        <tr>\n",
              "            <td>ACCOUNT</td>\n",
              "            <td>table</td>\n",
              "        </tr>\n",
              "        <tr>\n",
              "            <td>TRANS</td>\n",
              "            <td>table</td>\n",
              "        </tr>\n",
              "        <tr>\n",
              "            <td>CLIENT</td>\n",
              "            <td>table</td>\n",
              "        </tr>\n",
              "        <tr>\n",
              "            <td>DISPOSITION</td>\n",
              "            <td>table</td>\n",
              "        </tr>\n",
              "        <tr>\n",
              "            <td>CREDIT_CARD</td>\n",
              "            <td>table</td>\n",
              "        </tr>\n",
              "        <tr>\n",
              "            <td>LOAN</td>\n",
              "            <td>table</td>\n",
              "        </tr>\n",
              "        <tr>\n",
              "            <td>PERMANENT_ORDER</td>\n",
              "            <td>table</td>\n",
              "        </tr>\n",
              "    </tbody>\n",
              "</table>"
            ]
          },
          "metadata": {},
          "execution_count": 4
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "# 2) Ejercicios"
      ],
      "metadata": {
        "id": "w1dQpIpYArJJ"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "2.1) Muestre los datos de la tabla cliente"
      ],
      "metadata": {
        "id": "gyjcrhslA1dP"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "%%sql\n",
        "SELECT *\n",
        "FROM CLIENT\n",
        "LIMIT 5;"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 182
        },
        "id": "aUB5qC-bA8DX",
        "outputId": "161539f3-7d89-4ca5-f249-9bcaec5dd0ff"
      },
      "execution_count": 5,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            " * sqlite:///data_berka.db\n",
            "Done.\n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "[(1, '706213', 18),\n",
              " (2, '450204', 1),\n",
              " (3, '406009', 1),\n",
              " (4, '561201', 5),\n",
              " (5, '605703', 5)]"
            ],
            "text/html": [
              "<table>\n",
              "    <thead>\n",
              "        <tr>\n",
              "            <th>client_id</th>\n",
              "            <th>birth_number</th>\n",
              "            <th>district_id</th>\n",
              "        </tr>\n",
              "    </thead>\n",
              "    <tbody>\n",
              "        <tr>\n",
              "            <td>1</td>\n",
              "            <td>706213</td>\n",
              "            <td>18</td>\n",
              "        </tr>\n",
              "        <tr>\n",
              "            <td>2</td>\n",
              "            <td>450204</td>\n",
              "            <td>1</td>\n",
              "        </tr>\n",
              "        <tr>\n",
              "            <td>3</td>\n",
              "            <td>406009</td>\n",
              "            <td>1</td>\n",
              "        </tr>\n",
              "        <tr>\n",
              "            <td>4</td>\n",
              "            <td>561201</td>\n",
              "            <td>5</td>\n",
              "        </tr>\n",
              "        <tr>\n",
              "            <td>5</td>\n",
              "            <td>605703</td>\n",
              "            <td>5</td>\n",
              "        </tr>\n",
              "    </tbody>\n",
              "</table>"
            ]
          },
          "metadata": {},
          "execution_count": 5
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "2.2) Liste todos los clientes con cuentas activas y prestamos, incluyendo dinero prestado y saldos de cuenta"
      ],
      "metadata": {
        "id": "xJGRoUcXBMNY"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "%%sql\n",
        "SELECT\n",
        "  c.client_id AS Cliente,\n",
        "  ROUND(SUM(l.amount), 2) AS Importe_prestado,\n",
        "  ROUND(SUM(CASE\n",
        "    WHEN t.type = 'PRIJEM' THEN t.amount\n",
        "    WHEN t.type = 'VYDAJ' THEN -t.amount\n",
        "    ELSE 0\n",
        "  END), 2) AS Balance_cuenta\n",
        "FROM CLIENT c\n",
        "LEFT JOIN DISPOSITION d ON d.client_id = c.client_id\n",
        "LEFT JOIN ACCOUNT a ON a.account_id = d.account_id\n",
        "LEFT JOIN LOAN l ON l.account_id = a.account_id\n",
        "LEFT JOIN TRANS t ON t.account_id = a.account_id\n",
        "WHERE d.type = 'OWNER'\n",
        "GROUP BY c.client_id\n",
        "LIMIT 10;"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 289
        },
        "id": "8NJgFkuNDhlf",
        "outputId": "914ee187-c03e-493a-bca7-21e9d2535e6d"
      },
      "execution_count": 6,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            " * sqlite:///data_berka.db\n",
            "Done.\n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "[(1, None, 13466.5),\n",
              " (2, 38695056.0, 260069.7),\n",
              " (4, None, 51096.2),\n",
              " (6, None, 33720.6),\n",
              " (7, None, 28088.6),\n",
              " (8, None, 47667.9),\n",
              " (9, None, 68495.9),\n",
              " (10, None, 72617.3),\n",
              " (12, None, 23877.7),\n",
              " (13, None, 59295.5)]"
            ],
            "text/html": [
              "<table>\n",
              "    <thead>\n",
              "        <tr>\n",
              "            <th>Cliente</th>\n",
              "            <th>Importe_prestado</th>\n",
              "            <th>Balance_cuenta</th>\n",
              "        </tr>\n",
              "    </thead>\n",
              "    <tbody>\n",
              "        <tr>\n",
              "            <td>1</td>\n",
              "            <td>None</td>\n",
              "            <td>13466.5</td>\n",
              "        </tr>\n",
              "        <tr>\n",
              "            <td>2</td>\n",
              "            <td>38695056.0</td>\n",
              "            <td>260069.7</td>\n",
              "        </tr>\n",
              "        <tr>\n",
              "            <td>4</td>\n",
              "            <td>None</td>\n",
              "            <td>51096.2</td>\n",
              "        </tr>\n",
              "        <tr>\n",
              "            <td>6</td>\n",
              "            <td>None</td>\n",
              "            <td>33720.6</td>\n",
              "        </tr>\n",
              "        <tr>\n",
              "            <td>7</td>\n",
              "            <td>None</td>\n",
              "            <td>28088.6</td>\n",
              "        </tr>\n",
              "        <tr>\n",
              "            <td>8</td>\n",
              "            <td>None</td>\n",
              "            <td>47667.9</td>\n",
              "        </tr>\n",
              "        <tr>\n",
              "            <td>9</td>\n",
              "            <td>None</td>\n",
              "            <td>68495.9</td>\n",
              "        </tr>\n",
              "        <tr>\n",
              "            <td>10</td>\n",
              "            <td>None</td>\n",
              "            <td>72617.3</td>\n",
              "        </tr>\n",
              "        <tr>\n",
              "            <td>12</td>\n",
              "            <td>None</td>\n",
              "            <td>23877.7</td>\n",
              "        </tr>\n",
              "        <tr>\n",
              "            <td>13</td>\n",
              "            <td>None</td>\n",
              "            <td>59295.5</td>\n",
              "        </tr>\n",
              "    </tbody>\n",
              "</table>"
            ]
          },
          "metadata": {},
          "execution_count": 6
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "2.3) Identifique clientes con multiples cuentas"
      ],
      "metadata": {
        "id": "HR1AAdH1FxqO"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "%%sql\n",
        "SELECT\n",
        "  c.client_id AS CLIENTES,\n",
        "  COUNT(a.account_id) AS NUM_CUENTAS\n",
        "FROM CLIENT c\n",
        "JOIN DISPOSITION d ON d.client_id = c.client_id\n",
        "JOIN ACCOUNT a ON a.account_id = d.account_id\n",
        "GROUP BY c.client_id\n",
        "HAVING COUNT(a.account_id) > 1 AND d.type = 'OWNER'\n",
        "LIMIT 5;"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 75
        },
        "id": "OmqJNazOF3Xm",
        "outputId": "e4f8985e-090f-495e-dc69-7ed3733408be"
      },
      "execution_count": 7,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            " * sqlite:///data_berka.db\n",
            "Done.\n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "[]"
            ],
            "text/html": [
              "<table>\n",
              "    <thead>\n",
              "        <tr>\n",
              "            <th>CLIENTES</th>\n",
              "            <th>NUM_CUENTAS</th>\n",
              "        </tr>\n",
              "    </thead>\n",
              "    <tbody>\n",
              "    </tbody>\n",
              "</table>"
            ]
          },
          "metadata": {},
          "execution_count": 7
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "2.4) Recupere transacciones del aÃ±o 1998, ordenadas por cantidad de transacciÃ³n, e identifique las 10 transacciones mÃ¡s grandes."
      ],
      "metadata": {
        "id": "FqPW0kNcUDoI"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "%%sql\n",
        "SELECT\n",
        "  trans_id AS Transaccion,\n",
        "  amount AS Cantidad,\n",
        "  date AS Fecha_transaccion\n",
        "FROM TRANS\n",
        "WHERE date LIKE '98%'\n",
        "ORDER BY amount DESC\n",
        "LIMIT 10;"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 289
        },
        "id": "7hziDDJ1UEgu",
        "outputId": "bb33cd64-8c84-4682-8782-ef29cc57f25a"
      },
      "execution_count": 8,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            " * sqlite:///data_berka.db\n",
            "Done.\n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "[(291346, 87400.0, 981215),\n",
              " (1306770, 87300.0, 980606),\n",
              " (1207200, 85800.0, 980619),\n",
              " (1170721, 81900.0, 980615),\n",
              " (706371, 80100.0, 980610),\n",
              " (141211, 78300.0, 980625),\n",
              " (1155373, 78000.0, 980618),\n",
              " (623347, 77400.0, 980612),\n",
              " (768915, 77100.0, 980620),\n",
              " (816974, 76800.0, 980621)]"
            ],
            "text/html": [
              "<table>\n",
              "    <thead>\n",
              "        <tr>\n",
              "            <th>Transaccion</th>\n",
              "            <th>Cantidad</th>\n",
              "            <th>Fecha_transaccion</th>\n",
              "        </tr>\n",
              "    </thead>\n",
              "    <tbody>\n",
              "        <tr>\n",
              "            <td>291346</td>\n",
              "            <td>87400.0</td>\n",
              "            <td>981215</td>\n",
              "        </tr>\n",
              "        <tr>\n",
              "            <td>1306770</td>\n",
              "            <td>87300.0</td>\n",
              "            <td>980606</td>\n",
              "        </tr>\n",
              "        <tr>\n",
              "            <td>1207200</td>\n",
              "            <td>85800.0</td>\n",
              "            <td>980619</td>\n",
              "        </tr>\n",
              "        <tr>\n",
              "            <td>1170721</td>\n",
              "            <td>81900.0</td>\n",
              "            <td>980615</td>\n",
              "        </tr>\n",
              "        <tr>\n",
              "            <td>706371</td>\n",
              "            <td>80100.0</td>\n",
              "            <td>980610</td>\n",
              "        </tr>\n",
              "        <tr>\n",
              "            <td>141211</td>\n",
              "            <td>78300.0</td>\n",
              "            <td>980625</td>\n",
              "        </tr>\n",
              "        <tr>\n",
              "            <td>1155373</td>\n",
              "            <td>78000.0</td>\n",
              "            <td>980618</td>\n",
              "        </tr>\n",
              "        <tr>\n",
              "            <td>623347</td>\n",
              "            <td>77400.0</td>\n",
              "            <td>980612</td>\n",
              "        </tr>\n",
              "        <tr>\n",
              "            <td>768915</td>\n",
              "            <td>77100.0</td>\n",
              "            <td>980620</td>\n",
              "        </tr>\n",
              "        <tr>\n",
              "            <td>816974</td>\n",
              "            <td>76800.0</td>\n",
              "            <td>980621</td>\n",
              "        </tr>\n",
              "    </tbody>\n",
              "</table>"
            ]
          },
          "metadata": {},
          "execution_count": 8
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "2.5) Â¿CuÃ¡l es el saldo promedio de cuentas con prÃ©stamos en comparaciÃ³n con aquellas sin prÃ©stamos?."
      ],
      "metadata": {
        "id": "8QbEzxNhX2qX"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "%%sql\n",
        "SELECT\n",
        "  ROUND(AVG(t.balance), 2) AS Saldo_Promedio_Sin_Prestamos\n",
        "FROM ACCOUNT a\n",
        "LEFT JOIN TRANS t ON t.account_id = a.account_id\n",
        "LEFT JOIN LOAN l ON l.account_id = a.account_id\n",
        "WHERE l.loan_id IS NULL"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 96
        },
        "id": "3OILzpn4YUz2",
        "outputId": "100cca17-045e-40f7-9fef-47f7b8471327"
      },
      "execution_count": 9,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            " * sqlite:///data_berka.db\n",
            "Done.\n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "[(36979.08,)]"
            ],
            "text/html": [
              "<table>\n",
              "    <thead>\n",
              "        <tr>\n",
              "            <th>Saldo_Promedio_Sin_Prestamos</th>\n",
              "        </tr>\n",
              "    </thead>\n",
              "    <tbody>\n",
              "        <tr>\n",
              "            <td>36979.08</td>\n",
              "        </tr>\n",
              "    </tbody>\n",
              "</table>"
            ]
          },
          "metadata": {},
          "execution_count": 9
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "%%sql\n",
        "SELECT\n",
        "  ROUND(AVG(t.balance), 2) AS Saldo_Promedio_Con_Prestamos\n",
        "FROM ACCOUNT a\n",
        "LEFT JOIN TRANS t ON t.account_id = a.account_id\n",
        "LEFT JOIN LOAN l ON l.account_id = a.account_id\n",
        "WHERE l.loan_id IS NOT NULL"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 96
        },
        "id": "Ds5WVJTckHGv",
        "outputId": "1b94e144-13da-4165-d0b5-ec052be5fa79"
      },
      "execution_count": 10,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            " * sqlite:///data_berka.db\n",
            "Done.\n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "[(45467.14,)]"
            ],
            "text/html": [
              "<table>\n",
              "    <thead>\n",
              "        <tr>\n",
              "            <th>Saldo_Promedio_Con_Prestamos</th>\n",
              "        </tr>\n",
              "    </thead>\n",
              "    <tbody>\n",
              "        <tr>\n",
              "            <td>45467.14</td>\n",
              "        </tr>\n",
              "    </tbody>\n",
              "</table>"
            ]
          },
          "metadata": {},
          "execution_count": 10
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "2.6) Identifique clientes que hayan realizado mÃ¡s de 10 transacciones en el aÃ±o 1998 especÃ­fico pero que no hayan solicitado un prÃ©stamo."
      ],
      "metadata": {
        "id": "LhmcGufwdNTv"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "%%sql\n",
        "SELECT\n",
        "  c.client_id AS CLIENTE\n",
        "FROM CLIENT c\n",
        "LEFT JOIN DISPOSITION d ON d.client_id = c.client_id\n",
        "LEFT JOIN ACCOUNT a ON a.account_id = d.account_id\n",
        "LEFT JOIN TRANS t ON t.account_id = a.account_id\n",
        "LEFT JOIN LOAN l ON l.account_id = a.account_id\n",
        "WHERE SUBSTR(t.date, 0, 3) = '98' AND l.account_id IS NULL\n",
        "-- Primero filtra por aÃ±o y que la cuenta no haya prestamo\n",
        "GROUP BY c.client_id\n",
        "HAVING COUNT(t.trans_id) > 10\n",
        "-- Agrupa por cliente y luego cuenta\n",
        "LIMIT 10;"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 289
        },
        "id": "gK39aWq7dOMu",
        "outputId": "a80aca9b-3665-4e9c-bb72-fe8ece0139f4"
      },
      "execution_count": 11,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            " * sqlite:///data_berka.db\n",
            "Done.\n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "[(1,), (4,), (5,), (6,), (7,), (8,), (9,), (10,), (11,), (12,)]"
            ],
            "text/html": [
              "<table>\n",
              "    <thead>\n",
              "        <tr>\n",
              "            <th>CLIENTE</th>\n",
              "        </tr>\n",
              "    </thead>\n",
              "    <tbody>\n",
              "        <tr>\n",
              "            <td>1</td>\n",
              "        </tr>\n",
              "        <tr>\n",
              "            <td>4</td>\n",
              "        </tr>\n",
              "        <tr>\n",
              "            <td>5</td>\n",
              "        </tr>\n",
              "        <tr>\n",
              "            <td>6</td>\n",
              "        </tr>\n",
              "        <tr>\n",
              "            <td>7</td>\n",
              "        </tr>\n",
              "        <tr>\n",
              "            <td>8</td>\n",
              "        </tr>\n",
              "        <tr>\n",
              "            <td>9</td>\n",
              "        </tr>\n",
              "        <tr>\n",
              "            <td>10</td>\n",
              "        </tr>\n",
              "        <tr>\n",
              "            <td>11</td>\n",
              "        </tr>\n",
              "        <tr>\n",
              "            <td>12</td>\n",
              "        </tr>\n",
              "    </tbody>\n",
              "</table>"
            ]
          },
          "metadata": {},
          "execution_count": 11
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "2.7) Segmentar a los clientes en funciÃ³n al saldo de su cuenta (por ejemplo, bajo, medio, alto) y analizar la distribuciÃ³n de solicitudes de prÃ©stamos en estos segmentos."
      ],
      "metadata": {
        "id": "tO7AP3wsk9Wu"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "%%sql\n",
        "SELECT\n",
        "  ROUND(MIN(balance), 2) AS Min_Balance,\n",
        "  ROUND(MAX(balance), 2) AS Max_Balance\n",
        "FROM TRANS;"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 96
        },
        "id": "pH6mghWW0xRV",
        "outputId": "a45e53f8-e10e-4d83-acf1-1b1edef444c7"
      },
      "execution_count": 12,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            " * sqlite:///data_berka.db\n",
            "Done.\n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "[(-41125.7, 209637.0)]"
            ],
            "text/html": [
              "<table>\n",
              "    <thead>\n",
              "        <tr>\n",
              "            <th>Min_Balance</th>\n",
              "            <th>Max_Balance</th>\n",
              "        </tr>\n",
              "    </thead>\n",
              "    <tbody>\n",
              "        <tr>\n",
              "            <td>-41125.7</td>\n",
              "            <td>209637.0</td>\n",
              "        </tr>\n",
              "    </tbody>\n",
              "</table>"
            ]
          },
          "metadata": {},
          "execution_count": 12
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Realizamos la consulta individualizada\n",
        "Indicando rangos:\n",
        "> BAJO: de Min a 0\n",
        "> MEDIO: de 0 a MAX/2\n",
        "> ALTO: de MAX/2 a MAX"
      ],
      "metadata": {
        "id": "Cr08lHVA1Rq1"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "%%sql\n",
        "WITH Limits AS (SELECT MAX (balance)/2 AS medium_limit FROM TRANS)\n",
        "SELECT\n",
        "  c.client_id,\n",
        "  t.trans_id,\n",
        "  t.balance AS last_balance,\n",
        "  CASE\n",
        "    WHEN MAX(t.balance) > 0 THEN 'BAJO'\n",
        "    WHEN MAX(t.balance) > 0 AND MAX(t.balance) >= (SELECT medium_limit FROM Limits) THEN 'MEDIO'\n",
        "    WHEN MAX(t.balance) > (SELECT medium_limit FROM Limits) THEN 'Alto'\n",
        "    ELSE 'NAN'\n",
        "  END AS Calidad_Cliente\n",
        "FROM CLIENT c\n",
        "JOIN DISPOSITION d ON d.client_id = c.client_id\n",
        "JOIN TRANS t ON t.account_id = d.account_id\n",
        "JOIN (\n",
        "  SELECT account_id, MAX(trans_id) AS max_trans_id\n",
        "  FROM TRANS\n",
        "  GROUP BY account_id\n",
        ") latest_trans ON t.account_id = latest_trans.account_id AND t.trans_id = latest_trans.max_trans_id\n",
        "GROUP BY c.client_id\n",
        "LIMIT 10;"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 289
        },
        "id": "fZIEZ-Rn1viF",
        "outputId": "01126214-8fec-4d63-cb25-7785f031dcaf"
      },
      "execution_count": 13,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            " * sqlite:///data_berka.db\n",
            "Done.\n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "[(1, 3530482, 13466.5, 'BAJO'),\n",
              " (2, 3530552, 42628.1, 'BAJO'),\n",
              " (3, 3530552, 42628.1, 'BAJO'),\n",
              " (4, 3530570, 51096.1, 'BAJO'),\n",
              " (5, 3530570, 51096.1, 'BAJO'),\n",
              " (6, 3530600, 33720.7, 'BAJO'),\n",
              " (7, 3530615, 28088.3, 'BAJO'),\n",
              " (8, 3530662, 47668.0, 'BAJO'),\n",
              " (9, 3530687, 68495.5, 'BAJO'),\n",
              " (10, 3530726, 72617.2, 'BAJO')]"
            ],
            "text/html": [
              "<table>\n",
              "    <thead>\n",
              "        <tr>\n",
              "            <th>client_id</th>\n",
              "            <th>trans_id</th>\n",
              "            <th>last_balance</th>\n",
              "            <th>Calidad_Cliente</th>\n",
              "        </tr>\n",
              "    </thead>\n",
              "    <tbody>\n",
              "        <tr>\n",
              "            <td>1</td>\n",
              "            <td>3530482</td>\n",
              "            <td>13466.5</td>\n",
              "            <td>BAJO</td>\n",
              "        </tr>\n",
              "        <tr>\n",
              "            <td>2</td>\n",
              "            <td>3530552</td>\n",
              "            <td>42628.1</td>\n",
              "            <td>BAJO</td>\n",
              "        </tr>\n",
              "        <tr>\n",
              "            <td>3</td>\n",
              "            <td>3530552</td>\n",
              "            <td>42628.1</td>\n",
              "            <td>BAJO</td>\n",
              "        </tr>\n",
              "        <tr>\n",
              "            <td>4</td>\n",
              "            <td>3530570</td>\n",
              "            <td>51096.1</td>\n",
              "            <td>BAJO</td>\n",
              "        </tr>\n",
              "        <tr>\n",
              "            <td>5</td>\n",
              "            <td>3530570</td>\n",
              "            <td>51096.1</td>\n",
              "            <td>BAJO</td>\n",
              "        </tr>\n",
              "        <tr>\n",
              "            <td>6</td>\n",
              "            <td>3530600</td>\n",
              "            <td>33720.7</td>\n",
              "            <td>BAJO</td>\n",
              "        </tr>\n",
              "        <tr>\n",
              "            <td>7</td>\n",
              "            <td>3530615</td>\n",
              "            <td>28088.3</td>\n",
              "            <td>BAJO</td>\n",
              "        </tr>\n",
              "        <tr>\n",
              "            <td>8</td>\n",
              "            <td>3530662</td>\n",
              "            <td>47668.0</td>\n",
              "            <td>BAJO</td>\n",
              "        </tr>\n",
              "        <tr>\n",
              "            <td>9</td>\n",
              "            <td>3530687</td>\n",
              "            <td>68495.5</td>\n",
              "            <td>BAJO</td>\n",
              "        </tr>\n",
              "        <tr>\n",
              "            <td>10</td>\n",
              "            <td>3530726</td>\n",
              "            <td>72617.2</td>\n",
              "            <td>BAJO</td>\n",
              "        </tr>\n",
              "    </tbody>\n",
              "</table>"
            ]
          },
          "metadata": {},
          "execution_count": 13
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "2.8) Identifique a todos los clientes que incumplieron un prÃ©stamo."
      ],
      "metadata": {
        "id": "iEc2kh9ulCJl"
      }
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "0LK5bQd287-9"
      },
      "execution_count": 13,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "2.9) Identifique cualquier caracterÃ­stica comÃºn (como saldo en cuenta, volumen de transacciones, etc...) entre los clientes que incumplieron."
      ],
      "metadata": {
        "id": "kFwv49hilGRl"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "2.10) Identifique la informaciÃ³n que podrÃ­a ayudar al banco a evaluar el riesgo de prÃ©stamos en futuras aplicaciones."
      ],
      "metadata": {
        "id": "dLoUvABznTxP"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "3) Graficos en python"
      ],
      "metadata": {
        "id": "k3lWkLkJSRuV"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Cargamos las librerias necesarias\n",
        "import pandas as pd\n",
        "import matplotlib.pyplot as plt"
      ],
      "metadata": {
        "id": "3p52zjDMSXLV"
      },
      "execution_count": 25,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# Guardamos la consulta sql en una variable local python\n",
        "%%sql data1 << SELECT * FROM CREDIT_CARD"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "Uk5BES_DUVGe",
        "outputId": "fe37fc6f-798d-4515-e29c-a722f2d43640"
      },
      "execution_count": 17,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            " * sqlite:///data_berka.db\n",
            "Done.\n",
            "Returning data to local variable data1\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Transformamos la variable local data1, en un dataframe\n",
        "dt1 = data1.DataFrame();\n",
        "# Imprimir la cabecera del dataframe para confirmar los datos\n",
        "print(dt1.head());"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "lnEEki3SUwSk",
        "outputId": "3c026de0-2365-42b3-8ec7-90de5f375ef6"
      },
      "execution_count": 21,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "   card_id  disp_id     type           issued\n",
            "0     1005     9285  classic  931107 00:00:00\n",
            "1      104      588  classic  940119 00:00:00\n",
            "2      747     4915  classic  940205 00:00:00\n",
            "3       70      439  classic  940208 00:00:00\n",
            "4      577     3687  classic  940215 00:00:00\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#Contamos los valores.\n",
        "counts = dt1['type'].value_counts();\n",
        "print(counts);"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "5M-qCGvWb5o2",
        "outputId": "df981065-b8e5-4076-8cd6-1459544b009a"
      },
      "execution_count": 23,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "type\n",
            "classic    659\n",
            "junior     145\n",
            "gold        88\n",
            "Name: count, dtype: int64\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "plt.figure(figsize=(8, 8))\n",
        "plt.pie(counts.values, labels=counts.index, autopct='%1.1f%%', startangle=90)\n",
        "plt.title('Distribucion de tipos de tarjerta')\n",
        "plt.axis('equal')\n",
        "plt.show();"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 675
        },
        "id": "_BBhOZNndzad",
        "outputId": "82303ed5-95cb-416e-fce4-9cd31c0ae3f7"
      },
      "execution_count": 28,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 800x800 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    }
  ]
}